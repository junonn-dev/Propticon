22.12.05
[완료] ※ Delete 할때 중간에 빠져버려서 아래 Key Read 못함... 화면에 표시 오류 발생한다!!!
   → Sorting 을 해야하나?... max 개수 read 하고 화면에 뿌리는걸로 바꿔야 하나?
   → 고민해 봐야겄네...
   -. ListView Remove 후에 List 항목을 변수에 저장 및 Write 하는 방식으로 변경

22.12.01
[완료] 1. Monitor End 기능 추가
[완료] 2. 기간 설정 추가
  ※ 보완점 
   1) Day까지만 표시되므로 종료 시간까지 표시되도록
   2) 설정 여부 표시되도록
   3) 

22.11.30
[완료] 1. csv title 추가필요

22.11.14
[완료] 1. Listview2 UI 구현
 -. Add click 파일 Save 기능구현 필요.
 -. 프로그램 loading 해당내용 확인하여 표시.
 -. PID, ProcessName 으로 저장할것.
[완료] 2. PID 이용한 CPU, Memory, Handle, Thread 개수 가져오기

문제점 List
※ 파일 존재시 SetFileName 함수 예외처리로 title 추가하였으나...(사실 계속 StreamWriter? close, create 하는게 싫기도 했음)
   프로그램 재실행시 파일이 있으면... sw null 상태로 exception 발생함... 구찮다ㅠ
[완료] ※ Monitoring start 상태에서는 Insert, Delete, Clear 불가 메세지 처리할것

==================================================================================
참고 코드

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
 
namespace WorkManager
{
    public partial class Form1 : Form
    {
        int processCount = 0;
        private Thread ProcessThread; //프로세스 보여주기 위한 쓰레드
        Thread checkThread = null;    //실시간 시스템 정보 체크하기 위한 쓰레드
 
        private delegate void UpdateProcessDelegate(); //프로세스 현재 상태를 업데이트 하기 위한 델리게이트 생성
        private UpdateProcessDelegate updateProcess = null;
 
        private delegate void UpdateTotalDelegate(int m,int n); //status Bar에 성능 표시
        private UpdateTotalDelegate updateTotal = null;
 
        private PerformanceCounter oCpu = new PerformanceCounter("Processor", "% Processor Time", "_Total"); //시스템 CPU성능 카운터
        /*PerformanceCounter 사용법 
         * 첫번째 인자 Performance Object (IP,Processor,WMI,Memory
         * 두번째 인자 해당 Object의 카운터(Processor 인 경우 % Processor Time,% User Time, Thread Count)
         * (Memory 인 경우 Available MByte,Available KByte
         * 세번째 인자 프로세스의 이름
         * cpuCounter = new PerformanceCounter("Processor", "% Processor Time", "_Total"); //new PerformanceCounter("Processor", "% Processor Time", appName);
         * ramCounter = new PerformanceCounter("Memory", "Available MBytes");
         */
        private PerformanceCounter oMem =
            new PerformanceCounter("Memory", "% Committed Bytes In Use"); //시스템 Mem 성능 카운터
        private PerformanceCounter pCPU =
            new PerformanceCounter();
 
        bool bExit = false;
 
        public Form1()
        {
            InitializeComponent();
        }
        private void ProcessView()
        {
            try
            {
                this.lvView.Items.Clear();
                processCount = 0;
                foreach (var proc in Process.GetProcesses()) //모든 프로세스의 목록을 가져 오자
                {
                    string[] str;
                    try
                    {
                        str = proc.UserProcessorTime.ToString().Split(new Char[] { '.' });
                        //str = proc.TotalProcessorTime.ToString().Split(new Char[] { '.' }); //프로세스의 총시간
                    }
                    catch { str = new string[] { "" }; }
 
                    var strArray = new string[] { proc.ProcessName.ToString(), proc.Id.ToString(), //프로세스이름, 아이디
                        str[0], NumFormat(proc.WorkingSet64) }; //프로세스  수행시간,메모리 점유율
 
                    var lvt = new ListViewItem(strArray);
                    this.lvView.Items.Add(lvt);
                    processCount++;
                }
            }
            catch { }
            this.tssProcess.Text = "프로세스 : " + processCount.ToString() + "개";
        }
 
        private string NumFormat(long MemNum)
        {
            MemNum = MemNum / 1024;
            return String.Format("{0:N}", MemNum) + " KB"; //N은 숫자 서식 지정자 
        }
 
        private void Form1_Load(object sender, EventArgs e)
        {
            ProcessView(); //프로세스 출력
            updateProcess = new UpdateProcessDelegate(ProcessView); //ProcessView 델리게이트
            updateTotal = new UpdateTotalDelegate(TotalView);
            ProcessThread = new Thread(ProcessUpdate); //스레드 대리자에 구동 메서드 입력
            ProcessThread.Start(); //스레드 시작
            checkThread = new Thread(getCPU_Info);
            checkThread.Start();
        }
 
        private void getCPU_Info()
        {
            try
            {
                while (!bExit)
                {
                    int iCPU = (int)oCpu.NextValue();
                    int iMem = (int)oMem.NextValue();
                    Invoke(updateTotal, iCPU, iMem);
                    Thread.Sleep(1000);
                }
            }
            catch { }
        }
 
        private void ProcessUpdate()
        {
            try
            {
                while (true)
                {
                    //Invoke(updateProcess);
                   // Thread.Sleep(1000);
                   // continue;
                    var oldlist = new ArrayList();
                    foreach (var oldproc in Process.GetProcesses())
                    {
                        oldlist.Add(oldproc.Id.ToString());
                    }
                    Thread.Sleep(1000);
                    var newproc = Process.GetProcesses();
                    if (oldlist.Count != newproc.Length)
                    {
                        Invoke(updateProcess);
                        continue;
                    }
                    int i = 0;
                    foreach (var rewproc in Process.GetProcesses())
                    {
                        if (oldlist[i++].ToString() != rewproc.Id.ToString())
                        {
                            Invoke(updateProcess);
                            break;
                        }
                    }
                }
            }
            catch { }
        }
 
        private void TotalView(int m, int n)
        {
            try
            {
                this.tssCpu.Text = "CPU 사용: " + m.ToString() + " %";
                this.tssMemory.Text = "실제 메모리 : " + n.ToString() + " %";
            }
            catch { }
        }
 
        private void Form1_FormClosed(object sender, FormClosedEventArgs e)
        {
            bExit = true;
            if (!(ProcessThread == null))
                ProcessThread.Abort(); //스레드 종료
            if (!(checkThread == null))
                checkThread.Abort(); //스레드 종료
        }
    }
}